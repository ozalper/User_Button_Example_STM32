
User_button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000017c  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000344  0800034c  0001034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000344  08000344  0001034c  2**0
                  CONTENTS
  4 .ARM          00000000  08000344  08000344  0001034c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000344  0800034c  0001034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000344  08000344  00010344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000348  08000348  00010348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800034c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800034c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0001034c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000118  00000000  00000000  00010376  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000087  00000000  00000000  0001048e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000048  00000000  00000000  00010518  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000030  00000000  00000000  00010560  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000f02  00000000  00000000  00010590  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000044d  00000000  00000000  00011492  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00003b0d  00000000  00000000  000118df  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000153ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000054  00000000  00000000  00015468  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000000 	.word	0x20000000
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800032c 	.word	0x0800032c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000004 	.word	0x20000004
 8000204:	0800032c 	.word	0x0800032c

08000208 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif
#include <stdint.h>
int main(void)
{
 8000208:	b430      	push	{r4, r5}
    int32_t volatile *pGpioCInReg =   (int32_t *)0x40020810;
    int32_t volatile *pGpioBModeReg = (int32_t *)0x40020400;
    int32_t volatile *pGpioBWrReg =   (int32_t *)0x40020414;


    *pRccClockReg |= 1 << 2;
 800020a:	4c1c      	ldr	r4, [pc, #112]	; (800027c <main+0x74>)
    *pRccClockReg |= 1 << 1;
    *pGpioCModeReg &= ~(0x00000000);
 800020c:	481c      	ldr	r0, [pc, #112]	; (8000280 <main+0x78>)
    *pRccClockReg |= 1 << 2;
 800020e:	6825      	ldr	r5, [r4, #0]
    *pGpioBModeReg &= ~(0x00000280);
 8000210:	4a1c      	ldr	r2, [pc, #112]	; (8000284 <main+0x7c>)
    *pRccClockReg |= 1 << 2;
 8000212:	f045 0504 	orr.w	r5, r5, #4
    *pGpioBModeReg |= 1<<28;


	for(;;){

		if((*pGpioCInReg >> 13) & 1){
 8000216:	491c      	ldr	r1, [pc, #112]	; (8000288 <main+0x80>)
		    	*pGpioBWrReg |= 1<<7;
		    	*pGpioBWrReg &= ~(1<<14);
		    }
		else{
				*pGpioBWrReg &= ~(1<<7);
 8000218:	4b1c      	ldr	r3, [pc, #112]	; (800028c <main+0x84>)
    *pRccClockReg |= 1 << 2;
 800021a:	6025      	str	r5, [r4, #0]
    *pRccClockReg |= 1 << 1;
 800021c:	6825      	ldr	r5, [r4, #0]
 800021e:	f045 0502 	orr.w	r5, r5, #2
 8000222:	6025      	str	r5, [r4, #0]
    *pGpioCModeReg &= ~(0x00000000);
 8000224:	6804      	ldr	r4, [r0, #0]
 8000226:	6004      	str	r4, [r0, #0]
    *pGpioBModeReg &= ~(0x00000280);
 8000228:	6814      	ldr	r4, [r2, #0]
 800022a:	f424 7420 	bic.w	r4, r4, #640	; 0x280
 800022e:	6014      	str	r4, [r2, #0]
    *pGpioCModeReg |= 0<<24;
 8000230:	6804      	ldr	r4, [r0, #0]
 8000232:	6004      	str	r4, [r0, #0]
    *pGpioCModeReg |= 0<<25;
 8000234:	6804      	ldr	r4, [r0, #0]
 8000236:	6004      	str	r4, [r0, #0]
    *pGpioBModeReg |= 1<<14;
 8000238:	6810      	ldr	r0, [r2, #0]
 800023a:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
 800023e:	6010      	str	r0, [r2, #0]
    *pGpioBModeReg |= 1<<28;
 8000240:	6810      	ldr	r0, [r2, #0]
 8000242:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8000246:	6010      	str	r0, [r2, #0]
		if((*pGpioCInReg >> 13) & 1){
 8000248:	680a      	ldr	r2, [r1, #0]
 800024a:	f412 5f00 	tst.w	r2, #8192	; 0x2000
		    	*pGpioBWrReg |= 1<<7;
 800024e:	681a      	ldr	r2, [r3, #0]
		if((*pGpioCInReg >> 13) & 1){
 8000250:	d00b      	beq.n	800026a <main+0x62>
		    	*pGpioBWrReg |= 1<<7;
 8000252:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000256:	601a      	str	r2, [r3, #0]
		    	*pGpioBWrReg &= ~(1<<14);
 8000258:	681a      	ldr	r2, [r3, #0]
 800025a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800025e:	601a      	str	r2, [r3, #0]
		if((*pGpioCInReg >> 13) & 1){
 8000260:	680a      	ldr	r2, [r1, #0]
 8000262:	f412 5f00 	tst.w	r2, #8192	; 0x2000
		    	*pGpioBWrReg |= 1<<7;
 8000266:	681a      	ldr	r2, [r3, #0]
		if((*pGpioCInReg >> 13) & 1){
 8000268:	d1f3      	bne.n	8000252 <main+0x4a>
				*pGpioBWrReg &= ~(1<<7);
 800026a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800026e:	601a      	str	r2, [r3, #0]
				*pGpioBWrReg |= (1<<14);
 8000270:	681a      	ldr	r2, [r3, #0]
 8000272:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000276:	601a      	str	r2, [r3, #0]
 8000278:	e7e6      	b.n	8000248 <main+0x40>
 800027a:	bf00      	nop
 800027c:	40023830 	.word	0x40023830
 8000280:	40020800 	.word	0x40020800
 8000284:	40020400 	.word	0x40020400
 8000288:	40020810 	.word	0x40020810
 800028c:	40020414 	.word	0x40020414

08000290 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000290:	480d      	ldr	r0, [pc, #52]	; (80002c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000292:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000294:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000298:	480c      	ldr	r0, [pc, #48]	; (80002cc <LoopForever+0x6>)
  ldr r1, =_edata
 800029a:	490d      	ldr	r1, [pc, #52]	; (80002d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800029c:	4a0d      	ldr	r2, [pc, #52]	; (80002d4 <LoopForever+0xe>)
  movs r3, #0
 800029e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002a0:	e002      	b.n	80002a8 <LoopCopyDataInit>

080002a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002a6:	3304      	adds	r3, #4

080002a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002ac:	d3f9      	bcc.n	80002a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ae:	4a0a      	ldr	r2, [pc, #40]	; (80002d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002b0:	4c0a      	ldr	r4, [pc, #40]	; (80002dc <LoopForever+0x16>)
  movs r3, #0
 80002b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002b4:	e001      	b.n	80002ba <LoopFillZerobss>

080002b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002b8:	3204      	adds	r2, #4

080002ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002bc:	d3fb      	bcc.n	80002b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002be:	f000 f811 	bl	80002e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002c2:	f7ff ffa1 	bl	8000208 <main>

080002c6 <LoopForever>:

LoopForever:
    b LoopForever
 80002c6:	e7fe      	b.n	80002c6 <LoopForever>
  ldr   r0, =_estack
 80002c8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80002cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002d0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002d4:	0800034c 	.word	0x0800034c
  ldr r2, =_sbss
 80002d8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002dc:	2000001c 	.word	0x2000001c

080002e0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002e0:	e7fe      	b.n	80002e0 <ADC_IRQHandler>
	...

080002e4 <__libc_init_array>:
 80002e4:	b570      	push	{r4, r5, r6, lr}
 80002e6:	4e0d      	ldr	r6, [pc, #52]	; (800031c <__libc_init_array+0x38>)
 80002e8:	4c0d      	ldr	r4, [pc, #52]	; (8000320 <__libc_init_array+0x3c>)
 80002ea:	1ba4      	subs	r4, r4, r6
 80002ec:	10a4      	asrs	r4, r4, #2
 80002ee:	2500      	movs	r5, #0
 80002f0:	42a5      	cmp	r5, r4
 80002f2:	d109      	bne.n	8000308 <__libc_init_array+0x24>
 80002f4:	4e0b      	ldr	r6, [pc, #44]	; (8000324 <__libc_init_array+0x40>)
 80002f6:	4c0c      	ldr	r4, [pc, #48]	; (8000328 <__libc_init_array+0x44>)
 80002f8:	f000 f818 	bl	800032c <_init>
 80002fc:	1ba4      	subs	r4, r4, r6
 80002fe:	10a4      	asrs	r4, r4, #2
 8000300:	2500      	movs	r5, #0
 8000302:	42a5      	cmp	r5, r4
 8000304:	d105      	bne.n	8000312 <__libc_init_array+0x2e>
 8000306:	bd70      	pop	{r4, r5, r6, pc}
 8000308:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800030c:	4798      	blx	r3
 800030e:	3501      	adds	r5, #1
 8000310:	e7ee      	b.n	80002f0 <__libc_init_array+0xc>
 8000312:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000316:	4798      	blx	r3
 8000318:	3501      	adds	r5, #1
 800031a:	e7f2      	b.n	8000302 <__libc_init_array+0x1e>
 800031c:	08000344 	.word	0x08000344
 8000320:	08000344 	.word	0x08000344
 8000324:	08000344 	.word	0x08000344
 8000328:	08000348 	.word	0x08000348

0800032c <_init>:
 800032c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800032e:	bf00      	nop
 8000330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000332:	bc08      	pop	{r3}
 8000334:	469e      	mov	lr, r3
 8000336:	4770      	bx	lr

08000338 <_fini>:
 8000338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800033a:	bf00      	nop
 800033c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800033e:	bc08      	pop	{r3}
 8000340:	469e      	mov	lr, r3
 8000342:	4770      	bx	lr
